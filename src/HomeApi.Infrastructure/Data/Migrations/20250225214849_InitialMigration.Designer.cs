// <auto-generated />
using System;
using System.Collections.Generic;
using HomeApi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HomeApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250225214849_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("home_app")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<long?>("LockoutEnd")
                        .HasColumnType("bigint")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Currencies.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_id");

                    b.ToTable("currencies", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.EventKinds.EventKind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DefaultSeverity")
                        .HasColumnType("integer")
                        .HasColumnName("default_severity");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_event_kinds");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_event_kinds_id");

                    b.ToTable("event_kinds", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EventKindId")
                        .HasColumnType("integer")
                        .HasColumnName("event_kind_id");

                    b.Property<bool>("IsPeriodic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_periodic");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PeriodDefinition")
                        .HasColumnType("text")
                        .HasColumnName("period_definition");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("severity");

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "HomeApi.Domain.Entities.Events.Event.Duration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long?>("End")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_end");

                            b1.Property<long>("Start")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_start");
                        });

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("EventKindId")
                        .HasDatabaseName("ix_events_event_kind_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_events_id");

                    b.ToTable("events", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.IncomeKinds.IncomeKind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DefaultSeverity")
                        .HasColumnType("integer")
                        .HasColumnName("default_severity");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_income_kinds");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_income_kinds_id");

                    b.ToTable("income_kinds", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Incomes.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("IncomeKindId")
                        .HasColumnType("integer")
                        .HasColumnName("income_kind_id");

                    b.Property<bool>("IsPeriodic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_periodic");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PeriodDefinition")
                        .HasColumnType("text")
                        .HasColumnName("period_definition");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("severity");

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "HomeApi.Domain.Entities.Incomes.Income.Duration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long?>("End")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_end");

                            b1.Property<long>("Start")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_start");
                        });

                    b.HasKey("Id")
                        .HasName("pk_incomes");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_incomes_id");

                    b.HasIndex("IncomeKindId")
                        .HasDatabaseName("ix_incomes_income_kind_id");

                    b.ToTable("incomes", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.PaymentKinds.PaymentKind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DefaultSeverity")
                        .HasColumnType("integer")
                        .HasColumnName("default_severity");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_payment_kinds");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_payment_kinds_id");

                    b.ToTable("payment_kinds", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPeriodic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_periodic");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PaymentKindId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_kind_id");

                    b.Property<string>("PeriodDefinition")
                        .HasColumnType("text")
                        .HasColumnName("period_definition");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("severity");

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "HomeApi.Domain.Entities.Payments.Payment.Duration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long?>("End")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_end");

                            b1.Property<long>("Start")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_start");
                        });

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_id");

                    b.HasIndex("PaymentKindId")
                        .HasDatabaseName("ix_payments_payment_kind_id");

                    b.ToTable("payments", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Summaries.Summary", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPeriodic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_periodic");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("OverallAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("overall_amount");

                    b.Property<string>("PeriodDefinition")
                        .HasColumnType("text")
                        .HasColumnName("period_definition");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("severity");

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "HomeApi.Domain.Entities.Summaries.Summary.Duration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long?>("End")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_end");

                            b1.Property<long>("Start")
                                .HasColumnType("bigint")
                                .HasColumnName("duration_start");
                        });

                    b.HasKey("Id")
                        .HasName("pk_summaries");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_summaries_id");

                    b.ToTable("summaries", "home_app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "home_app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", "home_app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", "home_app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", "home_app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", "home_app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", "home_app");
                });

            modelBuilder.Entity("owners_events", b =>
                {
                    b.Property<Guid>("event_id")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("user_id")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("event_id", "user_id")
                        .HasName("pk_owners_events");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_owners_events_user_id");

                    b.ToTable("owners_events", "home_app");
                });

            modelBuilder.Entity("owners_incomes", b =>
                {
                    b.Property<Guid>("income_id")
                        .HasColumnType("uuid")
                        .HasColumnName("income_id");

                    b.Property<string>("user_id")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("income_id", "user_id")
                        .HasName("pk_owners_incomes");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_owners_incomes_user_id");

                    b.ToTable("owners_incomes", "home_app");
                });

            modelBuilder.Entity("owners_payments", b =>
                {
                    b.Property<Guid>("payment_id")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("user_id")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("payment_id", "user_id")
                        .HasName("pk_owners_payments");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_owners_payments_user_id");

                    b.ToTable("owners_payments", "home_app");
                });

            modelBuilder.Entity("summaries_incomes", b =>
                {
                    b.Property<Guid>("SummaryId")
                        .HasColumnType("uuid")
                        .HasColumnName("summary_id");

                    b.Property<Guid>("IncomeId")
                        .HasColumnType("uuid")
                        .HasColumnName("income_id");

                    b.Property<Guid>("_incomesId")
                        .HasColumnType("uuid")
                        .HasColumnName("_incomes_id");

                    b.HasKey("SummaryId", "IncomeId")
                        .HasName("pk_summaries_incomes");

                    b.HasIndex("IncomeId")
                        .HasDatabaseName("ix_summaries_incomes_income_id");

                    b.HasIndex("_incomesId")
                        .HasDatabaseName("ix_summaries_incomes__incomes_id");

                    b.ToTable("summaries_incomes", "home_app");
                });

            modelBuilder.Entity("summaries_payments", b =>
                {
                    b.Property<Guid>("SummaryId")
                        .HasColumnType("uuid")
                        .HasColumnName("summary_id");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<Guid>("_paymentsId")
                        .HasColumnType("uuid")
                        .HasColumnName("_payments_id");

                    b.HasKey("SummaryId", "PaymentId")
                        .HasName("pk_summaries_payments");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_summaries_payments_payment_id");

                    b.HasIndex("_paymentsId")
                        .HasDatabaseName("ix_summaries_payments__payments_id");

                    b.ToTable("summaries_payments", "home_app");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Events.Event", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.EventKinds.EventKind", null)
                        .WithMany()
                        .HasForeignKey("EventKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_event_kinds_event_kind_id");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Incomes.Income", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.IncomeKinds.IncomeKind", null)
                        .WithMany()
                        .HasForeignKey("IncomeKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_incomes_income_kinds_income_kind_id");
                });

            modelBuilder.Entity("HomeApi.Domain.Entities.Payments.Payment", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.PaymentKinds.PaymentKind", null)
                        .WithMany()
                        .HasForeignKey("PaymentKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_payment_kinds_payment_kind_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("owners_events", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.Events.Event", null)
                        .WithMany()
                        .HasForeignKey("event_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_events_events_event_id");

                    b.HasOne("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_events_asp_net_users_user_id");
                });

            modelBuilder.Entity("owners_incomes", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.Incomes.Income", null)
                        .WithMany()
                        .HasForeignKey("income_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_incomes_incomes_income_id");

                    b.HasOne("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_incomes_asp_net_users_user_id");
                });

            modelBuilder.Entity("owners_payments", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.Payments.Payment", null)
                        .WithMany()
                        .HasForeignKey("payment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_payments_payments_payment_id");

                    b.HasOne("HomeApi.Domain.Entities.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_payments_asp_net_users_user_id");
                });

            modelBuilder.Entity("summaries_incomes", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.Incomes.Income", null)
                        .WithMany()
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_summaries_incomes_incomes_income_id");

                    b.HasOne("HomeApi.Domain.Entities.Summaries.Summary", null)
                        .WithMany()
                        .HasForeignKey("SummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_summaries_incomes_summaries_summary_id");

                    b.HasOne("HomeApi.Domain.Entities.Incomes.Income", null)
                        .WithMany()
                        .HasForeignKey("_incomesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_summaries_incomes_incomes__incomes_id");
                });

            modelBuilder.Entity("summaries_payments", b =>
                {
                    b.HasOne("HomeApi.Domain.Entities.Payments.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_summaries_payments_payments_payment_id");

                    b.HasOne("HomeApi.Domain.Entities.Summaries.Summary", null)
                        .WithMany()
                        .HasForeignKey("SummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_summaries_payments_summaries_summary_id");

                    b.HasOne("HomeApi.Domain.Entities.Payments.Payment", null)
                        .WithMany()
                        .HasForeignKey("_paymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_summaries_payments_payments__payments_id");
                });
#pragma warning restore 612, 618
        }
    }
}
